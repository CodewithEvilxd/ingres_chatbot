#ifndef CHATBOT_H
#define CHATBOT_H

#include <stdbool.h>
#include "utils.h"
#include "database.h"

// Configuration constants
#define MAX_INPUT_LENGTH 512
#define MAX_RESPONSE_LENGTH 2048

/**
 * @brief Defines the type of user intent identified by the chatbot.
 *
 * This enum is used to categorize the user's query to determine the
 * appropriate action and response.
 */
typedef enum {
    INTENT_UNKNOWN,
    INTENT_GREETING,
    INTENT_GOODBYE,
    INTENT_HELP,
    INTENT_QUERY_LOCATION,      // e.g., "groundwater in Punjab"
    INTENT_QUERY_CATEGORY,      // e.g., "show over-exploited areas"
    INTENT_COMPARE_LOCATIONS,   // e.g., "compare Punjab and Haryana"
    INTENT_HISTORICAL_TREND,    // e.g., "trend for Maharashtra"
    INTENT_CRITICAL_AREAS,      // Alias for QUERY_CATEGORY with "critical"
    INTENT_SAFE_AREAS,          // Alias for QUERY_CATEGORY with "safe"
    INTENT_STATUS,              // e.g., "what is the status of the bot"
    INTENT_WATER_CRISIS,        // e.g., "areas facing water crisis"
    INTENT_RAINFALL_CORRELATION, // e.g., "how does rainfall affect groundwater"
    INTENT_POLICY_SUGGESTION,   // e.g., "policy recommendations for Punjab"
    INTENT_ERROR                // Represents an error in processing
} IntentType;

/**
 * @brief Represents the chatbot's structured response to a user query.
 *
 * This structure encapsulates all the information generated by the chatbot
 * in response to user input, including the textual message, classified intent,
 * and any data retrieved from the database.
 */
typedef struct {
    char* message;              // The primary text response for the user.
    IntentType intent;          // The classified intent of the user's query.
    QueryResult* query_result;  // Pointer to database query results, if any.
    bool has_data;              // Flag indicating if query_result is populated.
    float processing_time_ms;   // Time taken to process the query, in milliseconds.
} BotResponse;

/**
 * @brief Initializes the chatbot.
 *
 * Loads necessary resources like the database. This must be called before any
 * other chatbot functions.
 *
 * @return true if initialization is successful, false otherwise.
 */
bool chatbot_init(void);

/**
 * @brief Cleans up and frees all resources used by the chatbot.
 *
 * This should be called when the application is shutting down to prevent
 * memory leaks.
 */
void chatbot_cleanup(void);

/**
 * @brief Processes a user's query and returns a structured response.
 *
 * This is the core function for interacting with the chatbot. It takes a raw
 * string from the user, classifies the intent, performs database queries if
 * needed, and constructs a complete response object.
 *
 * @param user_input The raw string input from the user.
 * @return A pointer to a dynamically allocated BotResponse struct. The caller
 *         is responsible for freeing this memory by calling `free_bot_response`.
 */
BotResponse* process_user_query(const char* user_input);

/**
 * @brief Frees the memory allocated for a BotResponse struct.
 *
 * This function safely deallocates the BotResponse and its internal members,
 * including the QueryResult if it exists.
 *
 * @param response A pointer to the BotResponse to be freed.
 */
void free_bot_response(BotResponse* response);

/**
 * @brief Classifies user input into intent categories.
 *
 * @param user_input The raw string input from the user.
 * @return The classified intent type.
 */
IntentType classify_intent(const char* user_input);

/**
 * @brief Generates a response based on intent and context.
 *
 * @param intent The classified intent type.
 * @param location The location context (can be NULL).
 * @param query_details Additional query details (can be NULL).
 * @return A dynamically allocated response string.
 */
char* generate_response(IntentType intent, const char* location, const char* query_details);

#endif // CHATBOT_H